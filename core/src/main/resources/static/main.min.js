/*! EasyRider build 01-11-2014 */
var app = angular.module("easyrider", [ "ngRoute", "angularFileUpload", "cfp.hotkeys" ]);

app.config([ "$locationProvider", function($locationProvider) {
    $locationProvider.html5Mode(true);
} ]);

app.service("Api", [ "Connection", function(Connection) {
    var me = this;
    me.isAuthenticated = false;
    var indexId = 0;
    var idPrefix = "console";
    function nextId() {
        return idPrefix + indexId++;
    }
    me.objects = {
        Authenticate: function() {
            this.jsonClass = "easyrider.Api$AuthenticateUser";
        }
    };
    me.authenticate = function(auth) {
        Connection.send(auth);
        me.authObject = auth;
    };
    Connection.onOpen = function() {
        if (me.authObject) Connection.send(me.authObject);
    };
    function forceAuthenticated() {
        if (!me.isAuthenticated) throw new Error("You must be authenticated first");
    }
    var subscriptionsRequested = [];
    var replaysRequested = [];
    var sendAfterAuthentication = [];
    function Subscription(subscriptionId) {
        this.subscriptionId = subscriptionId;
        this.subscribed = false;
        this.snapshot = [];
    }
    var subscriptions = {};
    me.subscribe = function(eventType, eventKey) {
        if (!Connection.on[eventType]) {
            defineEvent(eventType);
        }
        var subscriptionId = eventType + "::" + eventKey.join("::");
        if (subscriptions[subscriptionId]) {
            return subscriptions[subscriptionId];
        }
        var subscription = {
            jsonClass: "easyrider.Events$Subscribe",
            commandDetails: {
                jsonClass: "easyrider.CommandDetails",
                commandId: {
                    jsonClass: "easyrider.CommandId",
                    id: nextId()
                },
                traceMode: {
                    jsonClass: "easyrider.TraceMode"
                }
            },
            subscriptionId: subscriptionId,
            eventType: {
                jsonClass: "easyrider.EventType",
                name: eventType,
                sender: {
                    id: "core",
                    jsonClass: "easyrider.ComponentId"
                }
            },
            eventKey: {
                jsonClass: "easyrider.EventKey",
                key: eventKey.push ? eventKey : eventKey.split(" ")
            }
        };
        var replayQueryId = nextId();
        var replay = {
            jsonClass: "easyrider.Events$GetReplay",
            queryId: {
                jsonClass: "easyrider.QueryId",
                id: replayQueryId
            },
            subscriptions: [ subscriptionId ],
            since: "2000-01-01T00:00:00.000Z"
        };
        if (me.isAuthenticated) {
            replaysRequested[replayQueryId] = subscription;
            console.log("replaysRequested: " + angular.toJson(replaysRequested));
            Connection.send(subscription);
            Connection.send(replay);
        }
        subscriptionsRequested.push(subscription);
        var s = new Subscription(subscriptionId);
        subscriptions[subscriptionId] = s;
        s.eventKey = subscription.eventKey;
        s.eventType = subscription.eventType;
        s.commandId = subscription.commandId;
        return s;
    };
    me.command = function(jsonClass, command) {
        command.jsonClass = jsonClass;
        command.commandDetails = {
            jsonClass: "easyrider.CommandDetails",
            commandId: {
                jsonClass: "easyrider.CommandId",
                id: nextId()
            },
            traceMode: {
                jsonClass: "easyrider.TraceMode"
            }
        };
        if (me.isAuthenticated) Connection.send(command); else sendAfterAuthentication.push(command);
    };
    Connection.on["easyrider.Api$Authentication"] = function() {
        me.isAuthenticated = true;
        for (var i in subscriptionsRequested) Connection.send(subscriptionsRequested[i]);
        for (i in sendAfterAuthentication) Connection.send(sendAfterAuthentication[i]);
        sendAfterAuthentication = [];
    };
    Connection.on["easyrider.Events$Subscribed"] = function(msg) {
        var s = subscriptions[msg.subscriptionId];
        s.subscribed = true;
        while (s.snapshot.length > 0) {
            s.snapshot.pop();
        }
        for (var i in msg.snapshot) {
            s.snapshot.push(msg.snapshot[i]);
        }
    };
    Connection.on["easyrider.Events$GetReplayResponse"] = function(msg) {
        var s = replaysRequested[msg.queryId.id];
        console.log(angular.toJson(replaysRequested) + ": " + angular.toJson(s.tail) + " <- " + angular.toJson(msg));
        s.tail = msg.events;
        delete replaysRequested[msg.queryId.id];
    };
    function handleFailure(msg) {
        alert(msg.message);
    }
    Connection.on["easyrider.Commands.Failure"] = handleFailure;
    Connection.on["easyrider.business.http.WebServerWorker$MessageFormatError"] = handleFailure;
    function defineEvent(className) {
        Connection.on[className] = function(event) {
            var eventKey = event.eventDetails.eventKey.key.join("::");
            for (var i in subscriptions) {
                var s = subscriptions[i];
                if (s.eventType.name == className) {
                    var any = false;
                    for (var j in s.snapshot) {
                        if (s.snapshot[j].eventDetails.eventKey.key.join("::") == eventKey) {
                            if (event.eventDetails.removal) {
                                s.snapshot.splice(j, 1);
                            } else {
                                s.snapshot[j] = event;
                            }
                            any = true;
                            break;
                        }
                    }
                    if (!any && !event.eventDetails.removal) {
                        s.snapshot.push(event);
                    }
                    if (!s.tail) {
                        s.tail = [];
                    }
                    s.tail.push(event);
                }
            }
        };
    }
} ]);

app.service("Applications", [ "Api", "Validators", "Utils", function(Api, Validators, Utils) {
    var me = this;
    me.subscription = Api.subscribe("easyrider.Applications$ApplicationUpdatedEvent", []);
    me.list = me.subscription.snapshot;
    me.addApplicationTemplate = function() {
        return {
            jsonClass: "easyrider.Applications$CreateApplication",
            application: {
                id: {
                    id: ""
                },
                properties: []
            }
        };
    };
    me.removeApplicationTemplate = function(applicationId) {
        return {
            jsonClass: "easyrider.Applications$RemoveApplication",
            applicationId: applicationId
        };
    };
    Validators.addValidator("easyrider.Applications$CreateApplication", function(command, reporter) {
        if (!Utils.isValidId(command.application.id.id)) reporter.fail("Invalid application id", Utils.idInfo);
    });
} ]);

app.service("Command", [ "Api", "Validators", function(Api, Validators) {
    var me = this;
    me.show = function(command) {
        me.command = command;
    };
    me.validate = function() {
        return Validators.validate(me.command);
    };
    me.command = null;
    me.cancel = function() {
        me.command = null;
    };
    me.execute = function() {
        Api.command(me.command.jsonClass, me.command);
        me.cancel();
    };
} ]);

app.controller("CommandCtrl", [ "$scope", "Command", function($scope, Command) {
    $scope.Command = Command;
    var commandJson = "";
    $scope.$watch(function() {
        var newJson = JSON.stringify(Command.command);
        if (commandJson != newJson) {
            commandJson = newJson;
            $scope.validation = Command.validate();
        }
    });
} ]);

app.service("Connection", [ "$rootScope", function($rootScope) {
    var me = this;
    me.open = false;
    me.on = {};
    me.lastCloudMessage = 0;
    me.lastToCloudMessage = 0;
    function onMessage(msg) {
        $rootScope.$apply(function() {
            if (me.on[msg.jsonClass]) me.on[msg.jsonClass](msg); else {
                console.error("Unhandled message ", msg);
            }
        });
    }
    function sendToCloud() {
        me.lastToCloudMessage = new Date().getTime();
        setTimeout(function() {
            $rootScope.$apply(function() {});
        }, 500);
    }
    var pending = [];
    me.send = function(msg) {
        var json = JSON.stringify(msg);
        if (me.open) {
            me.ws.send(json);
            sendToCloud();
        } else pending.push(json);
    };
    function connect() {
        me.ws = new WebSocket("ws://" + location.host);
        me.ws.onclose = function() {
            me.open = false;
            setTimeout(function() {
                connect();
            }, 500);
        };
        me.ws.onopen = function() {
            me.open = true;
            for (var i in pending) me.ws.send(pending[i]);
            pending = [];
            sendToCloud();
            $rootScope.$apply(me.onOpen);
        };
        me.ws.onmessage = function(e) {
            me.lastCloudMessage = new Date().getTime();
            onMessage(JSON.parse(e.data));
            setTimeout(function() {
                $rootScope.$apply(function() {});
            }, 700);
        };
    }
    connect();
} ]);

app.controller("ConnectionInfoCtrl", [ "$scope", "Connection", function($scope, Connection) {
    $scope.toUser = function() {
        return {
            opacity: new Date().getTime() - Connection.lastCloudMessage < 600 ? 1 : .2
        };
    };
    $scope.toCloud = function() {
        return {
            opacity: new Date().getTime() - Connection.lastToCloudMessage < 400 ? 1 : .2
        };
    };
} ]);

app.service("ContainersConfiguration", [ "Api", "Validators", "Utils", function(Api, Validators, Utils) {
    var me = this;
    me.subscription = Api.subscribe("easyrider.Applications$ContainerConfigurationUpdatedEvent", []);
    me.list = me.subscription.snapshot;
    me.addContainerConfigurationTemplate = function(stageId) {
        return {
            jsonClass: "easyrider.Applications$CreateContainerConfiguration",
            container: {
                id: {
                    stageId: stageId,
                    id: ""
                },
                properties: []
            }
        };
    };
    me.deployVersionTemplate = function(containerId) {
        return {
            jsonClass: "easyrider.Infrastructure$DeployVersion",
            containerId: containerId,
            version: {}
        };
    };
    me.startContainerTemplate = function(containerId, version) {
        return {
            jsonClass: "easyrider.Infrastructure$StartContainer",
            containerId: containerId,
            version: version
        };
    };
    me.stopContainerTemplate = function(containerId) {
        return {
            jsonClass: "easyrider.Infrastructure$StopContainer",
            containerId: containerId
        };
    };
    me.containersInStage = function(stageId) {
        if (!stageId) return [];
        var lst = [];
        for (var i in me.list) {
            var cce = me.list[i];
            if (stageId.id == cce.container.id.stageId.id) lst.push(cce);
        }
        return lst;
    };
    Validators.addValidator("easyrider.Applications$CreateContainerConfiguration", function(command, reporter) {
        if (!Utils.isValidId(command.container.id.id)) reporter.fail("Invalid container id", Utils.idInfo);
    });
} ]);

app.service("ContainersState", [ "Api", function(Api) {
    var me = this;
    me.subscription = Api.subscribe("easyrider.Infrastructure$ContainerStateChangedEvent", []);
    me.list = me.subscription.snapshot;
    var unknown = {
        jsonClass: "unknown"
    };
    me.containerStatus = function(containerId) {
        for (var i in me.list) {
            var status = me.list[i];
            var eventKey = status.eventDetails.eventKey.key;
            if (eventKey[0] == containerId.stageId.applicationId.id && eventKey[1] == containerId.stageId.id && eventKey[2] == containerId.id) return status.state;
        }
        return unknown;
    };
} ]);

app.service("DeployedVersions", [ "Api", function(Api) {
    var me = this;
    me.subscription = Api.subscribe("easyrider.Infrastructure$VersionDeploymentProgressEvent", []);
    me.list = me.subscription.snapshot;
    var emptyList = [];
    me.deployedVersionsByContainerId = function(containerId) {
        var lst = [];
        for (var i in me.list) {
            var eventKey = me.list[i].eventDetails.eventKey.key;
            if (eventKey[0] == containerId.stageId.applicationId.id && eventKey[1] == containerId.stageId.id && eventKey[2] == containerId.id) lst.push(me.list[i]);
        }
        if (lst.length === 0) return emptyList;
        return lst;
    };
} ]);

app.service("EventLog", [ "Api", function(Api) {
    var me = this;
    me.subscription = Api.subscribe("easyrider.Infrastructure$ContainerStateChangedEvent", []);
    me.events = me.subscription.tail;
} ]);

app.service("Search", [ "SearchGrammar", function(SearchGrammar) {
    this.Query = function() {
        var me = this;
        me.query = "";
        me.typeahead = [];
        me.results = [];
        function processParseResults(ast) {
            console.log(ast);
            me.typeahead = [ ast ];
        }
        me.process = function() {
            var ast;
            try {
                ast = SearchGrammar.parse(me.query);
            } catch (e) {
                me.typeahead = [ {
                    error: e
                } ];
                me.results = [];
            }
            if (ast) processParseResults(ast);
        };
    };
} ]);

app.service("SshNodes", [ "Api", "Validators", "Utils", function(Api, Validators, Utils) {
    var me = this;
    me.subscription = Api.subscribe("easyrider.business.ssh.SshInfrastructure$NodeConfigurationUpdatedEvent", []);
    me.stateSubscription = Api.subscribe("easyrider.Infrastructure$NodeUpdatedEvent", []);
    me.list = me.subscription.snapshot;
    me.stateList = me.stateSubscription.snapshot;
    me.addSshNodeTemplate = function() {
        return {
            jsonClass: "easyrider.business.ssh.SshInfrastructure$CreateNode",
            nodeConfiguration: {
                id: {
                    id: ""
                },
                host: "",
                port: 22,
                login: "",
                password: ""
            }
        };
    };
    me.nodeStates = function() {
        var nodes = {};
        for (var i in me.stateList) {
            nodes[me.stateList[i].eventDetails.eventKey.key[0]] = me.stateList[i];
        }
        return nodes;
    };
    Validators.addValidator("easyrider.business.ssh.SshInfrastructure$CreateNode", function(command, reporter) {
        if (!Utils.isValidId(command.nodeConfiguration.id.id)) reporter.fail("Invalid node id", Utils.idInfo);
    });
} ]);

app.service("Stages", [ "Api", "Validators", "Utils", function(Api, Validators, Utils) {
    var me = this;
    me.subscription = Api.subscribe("easyrider.Applications$StageUpdatedEvent", []);
    me.list = me.subscription.snapshot;
    me.addStageTemplate = function(applicationId) {
        return {
            jsonClass: "easyrider.Applications$CreateStage",
            stage: {
                id: {
                    applicationId: applicationId || null,
                    id: ""
                },
                properties: []
            }
        };
    };
    me.removeStageTemplate = function(stageId) {
        return {
            jsonClass: "easyrider.Applications$RemoveStage",
            stageId: stageId
        };
    };
    me.stagesOfApplication = function(applicationId) {
        var stages = [];
        for (var i in me.list) {
            if (me.list[i].stage.id.applicationId.id == applicationId.id) {
                stages.push(me.list[i]);
            }
        }
        return stages;
    };
    Validators.addValidator("easyrider.Applications$CreateStage", function(command, reporter) {
        if (!command.stage.id.applicationId) reporter.fail("No application selected", "You must select application related to this stage");
        if (!Utils.isValidId(command.stage.id.id)) reporter.fail("Invalid stage id", Utils.idInfo);
    });
} ]);

app.constant("StatusClasses", {
    "easyrider.Infrastructure$CreatingNode$": {
        state: "pending",
        label: "Creating node"
    },
    "easyrider.Infrastructure$NodeCreated$": {
        state: "success",
        label: "Ok"
    },
    "easyrider.Infrastructure$ContainerCreationFailed$": {
        state: "failure",
        label: "Can not create container"
    },
    "easyrider.Infrastructure$ContainerCreated$": {
        state: "paused",
        label: "Not running"
    },
    "easyrider.Infrastructure$ContainerRunning": {
        state: "success",
        label: "Running"
    },
    "easyrider.Infrastructure$ContainerStopping": {
        state: "pending",
        label: "Stopping"
    },
    "easyrider.Infrastructure$ContainerForceStopping": {
        state: "pending",
        label: "Force stopping"
    },
    "easyrider.Infrastructure$DeploymentInProgress$": {
        state: "pending",
        label: "Deployment in progress"
    },
    "easyrider.Infrastructure$DeploymentCompleted$": {
        state: "success",
        label: "Deployment completed"
    },
    "easyrider.Infrastructure$DeploymentFailed$": {
        state: "success",
        label: "Deployment failed"
    },
    unknown: {
        state: "unknown",
        label: "Unknown"
    }
});

app.constant("Utils", {
    isValidId: function(id) {
        return /^[a-zA-Z0-9_]+$/.test(id);
    },
    idInfo: "Id must be created from uppercase and lowercase letters, digits and underscore symbol."
});

app.service("Validators", function() {
    var me = this;
    var validators = {};
    me.addValidator = function(commandType, fun) {
        if (!validators[commandType]) validators[commandType] = [];
        validators[commandType].push(fun);
    };
    me.validate = function(command) {
        if (!command) return {
            alerts: [],
            canExplain: false,
            canExecute: false
        };
        var alerts = [];
        var canExplain = true;
        var canExecute = true;
        var reporter = {
            noExecute: function() {
                canExecute = false;
            },
            noExplain: function() {
                canExplain = false;
                canExecute = false;
            },
            info: function(title, text) {
                alerts.push({
                    level: "info",
                    title: title,
                    text: text
                });
            },
            warn: function(title, text) {
                alerts.push({
                    level: "warning",
                    title: title,
                    text: text
                });
            },
            fail: function(title, text) {
                alerts.push({
                    level: "danger",
                    title: title,
                    text: text
                });
                reporter.noExplain();
            }
        };
        var lst = validators[command.jsonClass];
        for (var i in lst) {
            lst[i](command, reporter);
        }
        return {
            canExecute: canExecute,
            canExplain: canExplain,
            alerts: alerts
        };
    };
});

app.service("Versions", [ "Api", function(Api) {
    this.subscription = Api.subscribe("easyrider.Repository$VersionAvailableEvent", []);
    this.list = this.subscription.snapshot;
} ]);

app.config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/application/:appId/stage/:stageId", {
        templateUrl: "/pages/applicationStage/template.html",
        controller: [ "$scope", "Stages", "$routeParams", function($scope, Stages, $routeParams) {
            $scope.appId = $routeParams.appId;
            $scope.stageId = $routeParams.stageId;
            $scope.stage = function() {
                for (var i in Stages.list) {
                    var stageEvent = Stages.list[i];
                    if (stageEvent.stage.id.id == $scope.stageId && stageEvent.stage.id.applicationId.id == $scope.appId) {
                        return stageEvent;
                    }
                }
            };
        } ]
    });
} ]);

app.config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/applications", {
        templateUrl: "/pages/applications/template.html",
        controller: [ "$scope", "Applications", "Command", "Stages", "ContainersConfiguration", "ContainersState", "Versions", "hotkeys", "$location", function($scope, Applications, Command, Stages, ContainersConfiguration, ContainersState, Versions, hotkeys, $location) {
            $scope.ContainersState = ContainersState;
            $scope.getApplications = function(any) {
                return Applications.list;
            };
            $scope.getStages = function(application) {
                return Stages.stagesOfApplication(application.application.id);
            };
            $scope.getContainers = function(stage) {
                return angular.forEach(ContainersConfiguration.containersInStage(stage.stage.id), function(container) {
                    container.status = function() {
                        return ContainersState.containerStatus(container.container.id);
                    };
                });
            };
            $scope.showApplication = function(application) {
                $location.path("/application/" + application.application.id.id);
            };
            $scope.showStage = function(stage) {
                $location.path("/application/" + stage.stage.id.applicationId.id + "/stage/" + stage.stage.id.id);
            };
            $scope.Applications = Applications;
            $scope.Stages = Stages;
            $scope.Versions = Versions;
            $scope.addApplication = function() {
                Command.show(Applications.addApplicationTemplate());
            };
            $scope.removeApplication = function(id) {
                Command.show(Applications.removeApplicationTemplate(id));
            };
            $scope.addStage = function(id) {
                Command.show(Stages.addStageTemplate(id));
            };
            $scope.versionsForApplication = function(appId, versions) {
                var filtered = [];
                for (var i in versions) {
                    var versionEvent = versions[i];
                    if (appId.id == versionEvent.eventDetails.eventKey.key[0]) filtered.push(versionEvent);
                }
                return filtered;
            };
        } ]
    });
} ]);

app.config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/eventLog", {
        templateUrl: "/pages/eventLog/template.html",
        controller: [ "$scope", "$routeParams", function($scope, $routeParams) {} ]
    });
} ]);

app.controller("LoginController", [ "$scope", "Api", function($scope, Api) {
    $scope.signIn = function() {
        Api.authenticate(new Api.objects.Authenticate());
    };
    $scope.Api = Api;
} ]);

app.config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/stages", {
        templateUrl: "/pages/stages/template.html",
        controller: [ "$scope", "Stages", "Command", function($scope, Stages, Command) {
            $scope.Stages = Stages;
            $scope.addStage = function() {
                Command.show(Stages.addStageTemplate());
            };
        } ]
    });
} ]);

app.directive("badge", function() {
    return {
        restrict: "E",
        scope: {
            state: "=",
            label: "="
        },
        template: "<span style='font-size:13.5px;line-height:27px' class='label label-{{labelColor[StatusClasses[state.jsonClass].state]}}'><i class='{{icon[StatusClasses[state.jsonClass].state]}}'></i>&nbsp;{{label||StatusClasses[state.jsonClass].label}}</span>",
        controller: [ "$scope", "StatusClasses", function($scope, StatusClasses) {
            $scope.StatusClasses = StatusClasses;
            $scope.icon = {
                unknown: "fa fa-question",
                pending: "fa fa-circle-o-notch fa-spin",
                success: "fa fa-check",
                failure: "fa fa-close",
                paused: "fa fa-pause"
            };
            $scope.labelColor = {
                unknown: "default",
                pending: "warning",
                success: "success",
                failure: "danger",
                paused: "default"
            };
        } ]
    };
});

app.directive("cardHeading", function() {
    return {
        restrict: "E",
        scope: {
            state: "="
        },
        transclude: true,
        template: "<div class='label-{{labelColor[StatusClasses[state.jsonClass].state]}} panel-heading'><h1 class=pull-left style=padding-right:15px;opacity:0.9><i class='{{icon[StatusClasses[state.jsonClass].state]}}'></i></h1><div ng-transclude></div></div>",
        controller: [ "$scope", "StatusClasses", function($scope, StatusClasses) {
            $scope.StatusClasses = StatusClasses;
            $scope.icon = {
                unknown: "fa fa-question",
                pending: "fa fa-circle-o-notch fa-spin",
                success: "fa fa-check",
                failure: "fa fa-close",
                paused: "fa fa-pause"
            };
            $scope.labelColor = {
                unknown: "default",
                pending: "warning",
                success: "success",
                failure: "danger",
                paused: "default"
            };
        } ]
    };
});

app.directive("eventLog", function() {
    return {
        restrict: "E",
        templateUrl: "/directives/eventLog/template.html",
        scope: {
            filter: "=",
            eventTypes: "="
        },
        controller: [ "$scope", "EventLog", function($scope, EventLog) {
            $scope.events = EventLog.subscription.tail;
        } ]
    };
});

app.directive("navigator", function() {
    return {
        transclude: true,
        restrict: "E",
        templateUrl: "/directives/navigator/template.html",
        scope: {},
        controller: [ "$scope", "hotkeys", function($scope, hotkeys) {
            var columns = $scope.columns = [];
            this.addColumn = function(column) {
                if (columns.length === 0) {
                    column.list = column.entries({
                        parent: null
                    });
                    column.active = true;
                } else {
                    column.list = [];
                }
                column.index = columns.length;
                column.select = function(index) {
                    column.selectedRowIndex = index;
                    $scope.columns[$scope.selectedColumnIndex].active = false;
                    column.active = true;
                    $scope.selectedColumnIndex = column.index;
                    $scope.onMove();
                };
                column.selectedRowIndex = 0;
                columns.push(column);
            };
            $scope.selectedColumnIndex = 0;
            $scope.onMove = function() {
                var newColumn = $scope.selectedColumnIndex;
                if (newColumn + 1 < $scope.columns.length) {
                    var list = $scope.columns[newColumn + 1].entries({
                        parent: $scope.columns[newColumn].list[$scope.columns[newColumn].selectedRowIndex]
                    });
                    $scope.columns[newColumn + 1].list = list;
                }
                for (var i = newColumn + 2; i < $scope.columns.length; i++) {
                    $scope.columns[i].list = [];
                }
            };
            hotkeys.bindTo($scope).add({
                combo: "left",
                description: "Navigate left",
                callback: function() {
                    var oldColumn = $scope.selectedColumnIndex;
                    var newColumn = Math.max(0, oldColumn - 1);
                    $scope.columns[oldColumn].active = false;
                    $scope.columns[newColumn].active = true;
                    $scope.selectedColumnIndex = newColumn;
                }
            }).add({
                combo: "right",
                description: "Navigate right",
                callback: function() {
                    var oldColumn = $scope.selectedColumnIndex;
                    var newColumn = Math.min($scope.columns.length - 1, oldColumn + 1);
                    if (oldColumn != newColumn && $scope.columns[newColumn].list.length > 0) {
                        $scope.columns[oldColumn].active = false;
                        $scope.columns[newColumn].active = true;
                        $scope.columns[newColumn].selectedRowIndex = 0;
                        $scope.selectedColumnIndex = newColumn;
                        $scope.onMove();
                    }
                }
            }).add({
                combo: "up",
                description: "Navigate up",
                callback: function() {
                    var newIndex = $scope.columns[$scope.selectedColumnIndex].selectedRowIndex - 1;
                    $scope.columns[$scope.selectedColumnIndex].selectedRowIndex = Math.max(newIndex, 0);
                    $scope.onMove();
                }
            }).add({
                combo: "down",
                description: "Navigate down",
                callback: function() {
                    $scope.columns[$scope.selectedColumnIndex].selectedRowIndex = Math.min($scope.columns[$scope.selectedColumnIndex].selectedRowIndex + 1, $scope.columns[$scope.selectedColumnIndex].list.length - 1);
                    $scope.onMove();
                }
            }).add({
                combo: "enter",
                description: "See details of selected item",
                callback: function() {
                    var selectedColumn = $scope.columns[$scope.selectedColumnIndex];
                    var entry = selectedColumn.list[selectedColumn.selectedRowIndex];
                    selectedColumn.details({
                        entry: entry
                    });
                }
            }).add({
                combo: "ctrl+n",
                description: "Add item",
                callback: function() {
                    var selectedColumn = $scope.columns[$scope.selectedColumnIndex];
                    var parent = null;
                    if ($scope.selectedColumnIndex > 0) {
                        var parentColumn = $scope.columns[$scope.selectedColumnIndex - 1];
                        parent = parentColumn.list[parentColumn.selectedRowIndex];
                    }
                    selectedColumn.add({
                        parent: parent
                    });
                }
            });
        } ]
    };
});

app.directive("navigatorColumn", function() {
    return {
        transclude: true,
        restrict: "E",
        templateUrl: "/directives/navigatorColumn/template.html",
        scope: {
            label: "@",
            entries: "&",
            details: "&",
            add: "&"
        },
        require: "^navigator",
        link: function(scope, elem, attrs, navigator) {
            navigator.addColumn(scope);
        },
        controller: [ "$scope", function($scope) {} ]
    };
});

app.directive("transcope", function() {
    return {
        link: function($scope, $element, $attrs, controller, $transclude) {
            if (!$transclude) {
                throw minErr("ngTransclude")("orphan", "Illegal use of ngTransclude directive in the template! " + "No parent directive that requires a transclusion found. " + "Element: {0}", startingTag($element));
            }
            var innerScope = $scope.$new();
            $transclude(innerScope, function(clone) {
                $element.empty();
                $element.append(clone);
                $element.on("$destroy", function() {
                    innerScope.$destroy();
                });
            });
        }
    };
});

app.directive("selectApplication", function() {
    return {
        restrict: "A",
        templateUrl: "/directives/selectApplication/template.html",
        scope: {
            model: "="
        },
        controller: [ "$scope", "Applications", function($scope, Applications) {
            $scope.Applications = Applications;
            $scope.ids = function() {
                var ids = [];
                for (var i in Applications.list) ids.push(Applications.list[i].application.id);
                return ids;
            };
        } ]
    };
});

app.directive("selectNode", function() {
    return {
        restrict: "E",
        templateUrl: "/directives/selectNode/template.html",
        scope: {
            model: "="
        },
        controller: [ "$scope", "SshNodes", function($scope, SshNodes) {
            $scope.SshNodes = SshNodes;
            $scope.ids = function() {
                var ids = [];
                for (var i in SshNodes.stateList) ids.push(SshNodes.stateList[i].nodeId);
                return ids;
            };
        } ]
    };
});

app.directive("selectVersion", function() {
    return {
        restrict: "E",
        templateUrl: "/directives/selectVersion/template.html",
        scope: {
            model: "="
        },
        controller: [ "$scope", "Versions", function($scope, Versions) {
            $scope.ids = function() {
                var ids = [];
                for (var i in Versions.list) ids.push(Versions.list[i].version);
                return ids;
            };
        } ]
    };
});

app.directive("sshNode", function() {
    return {
        restrict: "E",
        scope: {
            configuration: "=",
            state: "="
        },
        templateUrl: "/directives/sshNode/template.html",
        controller: [ "$scope", "ContainersConfiguration", "SshNodes", "Command", function($scope, SshNodes, Command) {} ]
    };
});

app.directive("stage", function() {
    return {
        restrict: "A",
        scope: {
            stage: "="
        },
        templateUrl: "/directives/stage/template.html",
        controller: [ "$scope", "ContainersConfiguration", "ContainersState", "DeployedVersions", "Stages", "Command", function($scope, ContainersConfiguration, ContainersState, DeployedVersions, Stages, Command) {
            $scope.ContainersConfiguration = ContainersConfiguration;
            $scope.ContainersState = ContainersState;
            $scope.DeployedVersions = DeployedVersions;
            $scope.addStage = function() {
                Command.show(Stages.addStageTemplate());
            };
            $scope.removeStage = function(id) {
                Command.show(Stages.removeStageTemplate(id));
            };
            $scope.addContainer = function(stageId) {
                Command.show(ContainersConfiguration.addContainerConfigurationTemplate(stageId));
            };
            $scope.deployVersion = function(containerUpdatedEvent) {
                Command.show(ContainersConfiguration.deployVersionTemplate(containerUpdatedEvent.container.id));
            };
            $scope.startContainer = function(containerId, version) {
                Command.show(ContainersConfiguration.startContainerTemplate(containerId, version));
            };
            $scope.stopContainer = function(containerId) {
                Command.show(ContainersConfiguration.stopContainerTemplate(containerId));
            };
            $scope.canStop = function(containerState) {
                return containerState.jsonClass == "easyrider.Infrastructure$ContainerRunning";
            };
            $scope.canRemove = function(containerState) {
                return containerState.jsonClass == "easyrider.Infrastructure$ContainerCreated$";
            };
        } ]
    };
});

app.directive("uploadVersion", function() {
    return {
        restrict: "E",
        templateUrl: "/directives/uploadVersion/template.html",
        scope: {
            applicationId: "=appid"
        },
        controller: [ "$scope", "$upload", "$location", function($scope, $upload, $location) {
            $scope.upload = {};
            $scope.uploading = false;
            $scope.start = function() {
                if (!$scope.files || !$scope.files[0]) return;
                $scope.uploading = true;
                $scope.uploadProgress = 0;
                var upload = $upload.upload({
                    url: "/api/repository/upload",
                    headers: {},
                    data: {
                        application: $scope.applicationId.id,
                        version: $scope.upload.version
                    },
                    file: $scope.files[0],
                    fileFormDataName: "content"
                });
                upload.progress(function(event) {
                    $scope.uploadProgress = 100 * event.loaded / event.total;
                });
                upload.success(function(data) {
                    $location.path("/application/" + $scope.applicationId.id + "/version/" + $scope.upload.version);
                });
            };
        } ]
    };
});