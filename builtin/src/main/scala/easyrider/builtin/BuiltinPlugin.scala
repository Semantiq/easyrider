package easyrider.builtin

import java.io.File
import java.net.URL

import akka.actor.{Actor, ActorLogging, ActorRef, Props}
import akka.util.ByteString
import easyrider.Applications.{ContainerId, EffectiveConfigurationChanged}
import easyrider.Commands.{CommandExecution, Failure, Success}
import easyrider.Events.Subscribe
import easyrider.Infrastructure.{DeployConfigurationFile, ContainerCommand}
import easyrider.Plugins.RegisterContainerPlugin
import easyrider.Repository.StartUpload
import easyrider._
import easyrider.Implicits._

class BuiltinPlugin extends Actor with ActorLogging {
  var commands = Map[CommandId, ActorRef]()

  context.parent ! Subscribe(CommandDetails(), "effective-configuration", classOf[EffectiveConfigurationChanged], EventKey())
  context.parent ! RegisterContainerPlugin(CommandDetails(), "builtin")
  val builtinModule = new BuiltinModule(new File("data"), new URL("http://localhost"), context.system, self, self, self)

  override def receive: Receive = {
    case m if sender() == context.parent => m match {
      case EffectiveConfigurationChanged(eventDetails, containerId, effectiveConfiguration) =>
        // TODO: de-dup SshDirectoryLayout
        def containerDir(containerId: ContainerId) = {
          s"easyrider/containers/${containerId.containerName}"
        }
        val content = "# Auto-generated by EasyRider\n" + effectiveConfiguration.entries.map {
          case (key, value) => s"$key=$value"
        }.mkString("\n")
        // TODO: correlate with original event
        context.parent ! DeployConfigurationFile(CommandDetails(), containerId, containerDir(containerId) + "/etc", "config.properties", ByteString(content, "UTF-8"))
      case m: CommandExecution =>
        commands(m.executionOf) ! m
        if (m.isInstanceOf[Success] || m.isInstanceOf[Failure]) {
          commands -= m.executionOf
        }
      case c: ContainerCommand =>
        builtinModule.containers ! c
      case other => log.info("TODO: deliver message: {}", other)
    }
    case upload: StartUpload => builtinModule.repositoryStorage.forward(upload)
    case m: Command =>
      commands += m.commandDetails.commandId -> sender()
      context.parent ! m
    case m =>
      context.parent ! m
  }
}

class BuiltinPluginFactory extends PluginFactory {
  def props: Props = Props[BuiltinPlugin]
  override def httpHandler(plugin: ActorRef) = Some(HttpWorker(() => UploadHandler(plugin)))
}
